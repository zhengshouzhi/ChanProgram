import numpy as np
from research_api import *
import pandas as pd
import math
import matplotlib.pyplot as plt

init_money = 1000000
start_date = '2009-01-01'
end_date = '2015-10-26'
#每笔交易时的手续费是, 买入时万分之三，卖出时万分之三加千分之一印花税, 每笔交易最低扣0块钱
buy_cost = 0.0003
sell_cost = 0.0013
min_cost = 0
cangweip = 25/100.0 #设定持股仓位
moneyp = 0 #现金占比
threshold = 5/100.0#设置阈值
pricec = 'open'#用pricec计算仓位价格,是否符合买入卖出条件
price = 'close'#买入卖出价格
stocklist = ['600000.XSHG','600036.XSHG','601166.XSHG','600016.XSHG']#浦发，招商，兴业，民生

get_price(stocklist[0], start_date, end_date, frequency='daily')['close'].plot(label = 'pufa',figsize=[18,10])
get_price(stocklist[1], start_date, end_date, frequency='daily')['close'].plot(label = 'zhaoshang')
get_price(stocklist[2], start_date, end_date, frequency='daily')['close'].plot(label = 'xingye')
get_price(stocklist[3], start_date, end_date, frequency='daily')['close'].plot(label = 'minsheng')
plt.legend(loc='best')


#数据预处理，将停牌数据定义为nan值。
def dataprocess(stocklist,start_date, end_date):#输入stocklist列表
    stocks=[]
    for stock in stocklist:
        df_stock = get_price(stock, start_date, end_date, frequency='daily')
        df_stock[df_stock['volume']==0]=np.nan
        df_stock = df_stock[['open','close']]
        stocks.append( df_stock )
    return stocks
	
	
	def balance(stocks,pricec,price,buy_cost,sell_cost,min_cost,cangweip,threshold,init_money):
    df_stock1 = stocks[0];
	df_stock2 = stocks[1];
	df_stock3 = stocks[2];
	df_stock4 = stocks[3]
	#每只股票的dataframe
    num_stock1 = [];num_stock2 = [];num_stock3 = [];num_stock4 = []#股票持有数
    cangwei1 = [];cangwei2 = [];cangwei3 = [];cangwei4 = []#仓位
    n=len(stocks[0]);money = []#剩余现金
    portfolio_value = []#总价值
    portfolio_valuebudong = []
    p1 = [];p2 = [];p3 = [];p4 = []#仓位占比
    k = 0;num_tiaozheng = 0;index1=[]
    #开始第一天股票就有停盘数据，顺延直到都没停盘。只要有一只股票停盘就不进行操作
    for i in range(0,n):
        #print i
        numnan = 0
        for stock in stocks:
            if math.isnan(stock['open'][i]):
                numnan = numnan+1
        if numnan == 0:
            index1.append(stocks[0].index[i])
            if k==0:#初始买入，以开盘价买入
                cost = init_money*buy_cost
                if cost<min_cost:
                    cost = min_cost
                init_money1 = init_money - cost
                #计算可以购买的股票数
                num_stock1.append(int(cangweip*init_money1/df_stock1[pricec][i]))
                num_stock2.append(int(cangweip*init_money1/df_stock2[pricec][i]))
                num_stock3.append(int(cangweip*init_money1/df_stock3[pricec][i]))
                num_stock4.append(int(cangweip*init_money1/df_stock4[pricec][i]))
                #每只股票可购买的股票数存到一个list中
                num_stocks = [num_stock1,num_stock2,num_stock3,num_stock4]
                #计算仓位
                cangwei1.append(num_stock1[-1]*df_stock1[pricec][i])
                cangwei2.append(num_stock2[-1]*df_stock2[pricec][i])
                cangwei3.append(num_stock3[-1]*df_stock3[pricec][i])
                cangwei4.append(num_stock4[-1]*df_stock4[pricec][i])
                money.append(init_money1-cangwei1[-1]-cangwei2[-1]-cangwei3[-1]-cangwei4[-1])#计算持有的现金量
                portfolio_value.append(init_money)#初始化总价值
                #计算仓位比例
                p1.append(cangwei1[-1]/(init_money))
                p2.append(cangwei2[-1]/(init_money))
                p3.append(cangwei3[-1]/(init_money))
                p4.append(cangwei4[-1]/(init_money))
                k=k+1
            else:
                #计算仓位
                cangwei1.append(num_stock1[-1]*df_stock1[pricec][i])
                cangwei2.append(num_stock2[-1]*df_stock2[pricec][i])
                cangwei3.append(num_stock3[-1]*df_stock3[pricec][i])
                cangwei4.append(num_stock4[-1]*df_stock4[pricec][i])
                #计算总价值
                total_value = money[-1]+cangwei1[-1]+cangwei2[-1]+cangwei3[-1]+cangwei4[-1]
                #计算各股票所占的仓位比例
                p1.append(cangwei1[-1]/total_value)
                p2.append(cangwei2[-1]/total_value)
                p3.append(cangwei3[-1]/total_value)
                p4.append(cangwei4[-1]/total_value)
                #如果每只股票的仓位占比都在（仓位-阈值）到（仓位+阈值）之间，则不进行操作
                if p1[-1]>(cangweip-threshold) and p1[-1]<(cangweip+threshold) and p2[-1]>(cangweip-threshold) and p2[-1]<(cangweip+threshold)and p3[-1]>(cangweip-threshold) and p3[-1]<(cangweip+threshold)and p4[-1]>(cangweip-threshold) and p4[-1]<(cangweip+threshold):
                    num_stock1.append(num_stock1[-1])
                    num_stock2.append(num_stock2[-1])
                    num_stock3.append(num_stock3[-1])
                    num_stock4.append(num_stock4[-1])
                    num_stocks = [num_stock1,num_stock2,num_stock3,num_stock4]
                    money.append(money[-1])
                    portfolio_value.append(money[-1]+num_stock1[-1]*df_stock1[price][i]+num_stock2[-1]*df_stock2[price][i]+num_stock3[-1]*df_stock3[price][i]+num_stock4[-1]*df_stock4[price][i])
                #只要有一只股票触发调仓标准就进行买卖
                else:
                    #计算总价值
                    total_value = money[-1]+num_stock1[-1]*df_stock1[price][i]+num_stock2[-1]*df_stock2[price][i]+num_stock3[-1]*df_stock3[price][i]+num_stock4[-1]*df_stock4[price][i]
                    #计算买卖成本
                    for j in range(0,len(stocklist)):#循环四只股票
                        num_stock = int(cangweip*total_value/stocks[j][price][i])#计算得到目前总价值25%的仓位占比应该有的股票数
                        if num_stock-num_stocks[j][-1]>0:#应该有的-已有的股票数，>0需要买入股票，<0需要卖出股票
                            buy_money =(num_stock-num_stocks[j][-1])*stocks[j][price][i]
                            buycost = buy_money*buy_cost#计算买入手续费
                            total_value = total_value-buycost
                        else:
                            sell_money =abs(num_stock-num_stocks[j][-1])*stocks[j][price][i]
                            sellcost = sell_money*sell_cost#计算卖出手续费
                            total_value = total_value-sellcost
                    #计算除去手续费后可以购买的股票数量
                    num_stock1.append(int(cangweip*total_value/df_stock1[price][i]))
                    num_stock2.append(int(cangweip*total_value/df_stock2[price][i]))
                    num_stock3.append(int(cangweip*total_value/df_stock3[price][i]))
                    num_stock4.append(int(cangweip*total_value/df_stock4[price][i]))
                    #计算现金持有量
                    money.append(total_value-num_stock1[-1]*df_stock1[price][i]-num_stock2[-1]*df_stock2[price][i]-num_stock3[-1]*df_stock3[price][i]-num_stock4[-1]*df_stock4[price][i])
                    #计算现金股票的总价值
                    portfolio_value.append(money[-1]+num_stock1[-1]*df_stock1[price][i]+num_stock2[-1]*df_stock2[price][i]+num_stock3[-1]*df_stock3[price][i]+num_stock4[-1]*df_stock4[price][i])              
                    #进行调整一次，调整次数加1
                    num_tiaozheng = num_tiaozheng + 1
            #计算持股不动时，组合的总价值
            portfolio_valuebudong.append(money[0]+num_stock1[0]*df_stock1[price][i]+num_stock2[0]*df_stock2[price][i]+num_stock3[0]*df_stock3[price][i]+num_stock4[0]*df_stock4[price][i])
    df2 = pd.DataFrame(index = index1)
    df2['num_stock1'] = num_stock1
    df2['num_stock2'] = num_stock2
    df2['num_stock3'] = num_stock3
    df2['num_stock4'] = num_stock4
    df2['caiwei1'] = cangwei1
    df2['caiwei2'] = cangwei2
    df2['caiwei3'] = cangwei3
    df2['caiwei4'] = cangwei4
    df2['portfolio_value'] = portfolio_value
    return portfolio_value,portfolio_valuebudong,num_tiaozheng,df2
循环不同的阈值参数，得到动态平衡的最终价值，持股不动的最终价值，调整次数。
In [9]:
stocks = dataprocess(stocklist,start_date, end_date)#list中是dataframe
canshu = [0.25/100.0,0.5/100.0,0.75/100.0,1/100.0,2/100.0,3/100.0,4/100.0,5/100.0,6/100.0,7/100.0,8/100.0,9/100.0,10/100.0,11/100.0,12/100.0,13/100.0,14/100.0,15/100.0,16/100.0,17/100.0,18/100.0,19/100.0,20/100.0]
list1=[]
for threshold in canshu:
    portfolio_value,portfolio_valuebudong,num_tiaozheng,df2 = balance(stocks,pricec,price,buy_cost,sell_cost,min_cost,cangweip,threshold,init_money)
    list1.append(df2)
    print portfolio_value[-1],portfolio_valuebudong[-1],num_tiaozheng